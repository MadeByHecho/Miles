# Miles
**A thin wrapper around XCTest Marcos to make tests just a bit more readable.**

Miles is a simple solution to an XCTest problem.  With other Swift testing solutions [Quick](https://github.com/Quick/Quick) and [Nimble](https://github.com/Quick/Nimble) you're forced to trade solid Xcode Tools integration for readability and ease (Authors Note. Quick and Nimble are both amazing and you should definitely check them out).  With Miles you get solid Xcode integration, such as the ability to run single tests from the Xcode gutter, but still excellent readability.

Miles is named after Darius Miles, a former professional basketball player who also had a role in the 2004 Movie 'The Perfect Score', where he and 5 students try to steal the SAT.

## Background

Apple's Xcode includes the XCTest framework, which provides assertion macros to test whether code behaves properly. For example, to assert that `1 + 1 = 2`, XCTest has you write:

```swift
XCTAssertEqual(1 + 1, 2, "expected one plus one to equal two")
```

In a more robust testing framework like Quick/Nimble you get the much more readable:

```swift
expect(1 + 1).to(equal(2))
```

In Miles you get something that I think is even more readable:

```swift
(1+1).shouldEqual(2)
```

## Usage

Miles.swift defines all the extensions, so make sure it's either included in your Test Target or that you import Miles in the class you're trying to test.  Then when you want to validate that the 5+5 = 10 you can do this:

```swift
func testThatFivePlusFiveEqualsTen() {
	
	10.shouldEqual(5 + 5)
}
```

If you wanted to do something a bit more complicated like validate that a certain string has a suffix, that would look like this:

```swift
func testThatMilesEndsInLes() {
	let miles = "miles"
	miles.shouldHaveSuffix("les")
}
```

Miles currently provides extensions for many of the swift standard types including:

* String
* Character
* Int
* Float
* Double
* Bool
* NSObject

Because Swift doesn't currently support public extensions on generic types, Miles provides Global functions to validate Array, Dictionary and Optional types.
